/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.ConnAck');
goog.provide('proto.Connect');
goog.provide('proto.CreateTeamReq');
goog.provide('proto.Disconnect');
goog.provide('proto.DismissTeamReq');
goog.provide('proto.Message');
goog.provide('proto.Message.PayloadCase');
goog.provide('proto.MsgData');
goog.provide('proto.MsgDataAck');
goog.provide('proto.PacketType');
goog.provide('proto.Ping');
goog.provide('proto.Pong');
goog.provide('proto.QueryMemberListReq');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Connect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Connect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Connect.displayName = 'proto.Connect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConnAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConnAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConnAck.displayName = 'proto.ConnAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Ping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Ping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Ping.displayName = 'proto.Ping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Pong = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Pong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Pong.displayName = 'proto.Pong';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Disconnect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Disconnect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Disconnect.displayName = 'proto.Disconnect';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Connect.prototype.toObject = function(opt_includeInstance) {
  return proto.Connect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Connect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Connect.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deviceId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    token: jspb.Message.getFieldWithDefault(msg, 3, ""),
    platform: jspb.Message.getFieldWithDefault(msg, 4, 0),
    clientVersion: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Connect}
 */
proto.Connect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Connect;
  return proto.Connect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Connect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Connect}
 */
proto.Connect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlatform(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Connect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Connect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Connect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Connect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPlatform();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getClientVersion();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint64 user_id = 1;
 * @return {number}
 */
proto.Connect.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Connect} returns this
 */
proto.Connect.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string device_id = 2;
 * @return {string}
 */
proto.Connect.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Connect} returns this
 */
proto.Connect.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string token = 3;
 * @return {string}
 */
proto.Connect.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Connect} returns this
 */
proto.Connect.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 platform = 4;
 * @return {number}
 */
proto.Connect.prototype.getPlatform = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Connect} returns this
 */
proto.Connect.prototype.setPlatform = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string client_version = 5;
 * @return {string}
 */
proto.Connect.prototype.getClientVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Connect} returns this
 */
proto.Connect.prototype.setClientVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConnAck.prototype.toObject = function(opt_includeInstance) {
  return proto.ConnAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConnAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0),
    info: jspb.Message.getFieldWithDefault(msg, 3, ""),
    expose: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConnAck}
 */
proto.ConnAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConnAck;
  return proto.ConnAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConnAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConnAck}
 */
proto.ConnAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExpose(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConnAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConnAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConnAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getExpose();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional bool result = 1;
 * @return {boolean}
 */
proto.ConnAck.prototype.getResult = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ConnAck} returns this
 */
proto.ConnAck.prototype.setResult = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional uint32 code = 2;
 * @return {number}
 */
proto.ConnAck.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ConnAck} returns this
 */
proto.ConnAck.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string info = 3;
 * @return {string}
 */
proto.ConnAck.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConnAck} returns this
 */
proto.ConnAck.prototype.setInfo = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 expose = 4;
 * @return {number}
 */
proto.ConnAck.prototype.getExpose = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ConnAck} returns this
 */
proto.ConnAck.prototype.setExpose = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Ping.prototype.toObject = function(opt_includeInstance) {
  return proto.Ping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Ping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Ping.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Ping}
 */
proto.Ping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Ping;
  return proto.Ping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Ping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Ping}
 */
proto.Ping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Ping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Ping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Ping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Ping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.Ping.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Ping} returns this
 */
proto.Ping.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Pong.prototype.toObject = function(opt_includeInstance) {
  return proto.Pong.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Pong} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Pong.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Pong}
 */
proto.Pong.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Pong;
  return proto.Pong.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Pong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Pong}
 */
proto.Pong.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Pong.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Pong.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Pong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Pong.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Disconnect.prototype.toObject = function(opt_includeInstance) {
  return proto.Disconnect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Disconnect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Disconnect.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Disconnect}
 */
proto.Disconnect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Disconnect;
  return proto.Disconnect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Disconnect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Disconnect}
 */
proto.Disconnect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Disconnect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Disconnect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Disconnect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Disconnect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.PacketType = {
  CONNECT: 0,
  CONN_ACK: 1,
  PING: 2,
  PONG: 3,
  DISCONNECT: 4,
  MSG_DATA: 5,
  MSG_DATA_ACK: 6,
  CREATE_TEAM_REQ: 51,
  DISMISS_TEAM_REQ: 52,
  QUERY_MEMBER_LIST_REQ: 53
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MsgData.displayName = 'proto.MsgData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgDataAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgDataAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MsgDataAck.displayName = 'proto.MsgDataAck';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgData.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgData.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    toId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    msgId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sessionType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    msgDirection: jspb.Message.getFieldWithDefault(msg, 6, 0),
    msgStatus: jspb.Message.getFieldWithDefault(msg, 7, 0),
    msgAttachstr: jspb.Message.getFieldWithDefault(msg, 8, ""),
    msgType: jspb.Message.getFieldWithDefault(msg, 9, 0),
    content: jspb.Message.getFieldWithDefault(msg, 10, ""),
    fromClientType: jspb.Message.getFieldWithDefault(msg, 11, 0),
    time: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgData}
 */
proto.MsgData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgData;
  return proto.MsgData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgData}
 */
proto.MsgData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setToId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSessionType(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMsgDirection(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMsgStatus(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgAttachstr(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMsgType(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFromClientType(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getToId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMsgId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSessionType();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMsgDirection();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getMsgStatus();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getMsgAttachstr();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getMsgType();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getFromClientType();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
};


/**
 * optional uint64 from_id = 1;
 * @return {number}
 */
proto.MsgData.prototype.getFromId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgData} returns this
 */
proto.MsgData.prototype.setFromId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 to_id = 2;
 * @return {number}
 */
proto.MsgData.prototype.getToId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgData} returns this
 */
proto.MsgData.prototype.setToId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string msg_id = 3;
 * @return {string}
 */
proto.MsgData.prototype.getMsgId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.MsgData} returns this
 */
proto.MsgData.prototype.setMsgId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 session_type = 4;
 * @return {number}
 */
proto.MsgData.prototype.getSessionType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgData} returns this
 */
proto.MsgData.prototype.setSessionType = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 msg_direction = 6;
 * @return {number}
 */
proto.MsgData.prototype.getMsgDirection = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgData} returns this
 */
proto.MsgData.prototype.setMsgDirection = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 msg_status = 7;
 * @return {number}
 */
proto.MsgData.prototype.getMsgStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgData} returns this
 */
proto.MsgData.prototype.setMsgStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string msg_attachStr = 8;
 * @return {string}
 */
proto.MsgData.prototype.getMsgAttachstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.MsgData} returns this
 */
proto.MsgData.prototype.setMsgAttachstr = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional uint32 msg_type = 9;
 * @return {number}
 */
proto.MsgData.prototype.getMsgType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgData} returns this
 */
proto.MsgData.prototype.setMsgType = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string content = 10;
 * @return {string}
 */
proto.MsgData.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.MsgData} returns this
 */
proto.MsgData.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional uint32 from_client_type = 11;
 * @return {number}
 */
proto.MsgData.prototype.getFromClientType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgData} returns this
 */
proto.MsgData.prototype.setFromClientType = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint32 time = 12;
 * @return {number}
 */
proto.MsgData.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgData} returns this
 */
proto.MsgData.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgDataAck.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgDataAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgDataAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgDataAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    toId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sessionType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    msgId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgDataAck}
 */
proto.MsgDataAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgDataAck;
  return proto.MsgDataAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgDataAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgDataAck}
 */
proto.MsgDataAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setToId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSessionType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgDataAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgDataAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgDataAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgDataAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getToId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSessionType();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMsgId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint64 from_id = 1;
 * @return {number}
 */
proto.MsgDataAck.prototype.getFromId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgDataAck} returns this
 */
proto.MsgDataAck.prototype.setFromId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 to_id = 2;
 * @return {number}
 */
proto.MsgDataAck.prototype.getToId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgDataAck} returns this
 */
proto.MsgDataAck.prototype.setToId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 session_type = 3;
 * @return {number}
 */
proto.MsgDataAck.prototype.getSessionType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgDataAck} returns this
 */
proto.MsgDataAck.prototype.setSessionType = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string msg_id = 4;
 * @return {string}
 */
proto.MsgDataAck.prototype.getMsgId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.MsgDataAck} returns this
 */
proto.MsgDataAck.prototype.setMsgId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateTeamReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CreateTeamReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CreateTeamReq.displayName = 'proto.CreateTeamReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DismissTeamReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DismissTeamReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DismissTeamReq.displayName = 'proto.DismissTeamReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.QueryMemberListReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.QueryMemberListReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.QueryMemberListReq.displayName = 'proto.QueryMemberListReq';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateTeamReq.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateTeamReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateTeamReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateTeamReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateTeamReq}
 */
proto.CreateTeamReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateTeamReq;
  return proto.CreateTeamReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateTeamReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateTeamReq}
 */
proto.CreateTeamReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateTeamReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreateTeamReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateTeamReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateTeamReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 time = 1;
 * @return {number}
 */
proto.CreateTeamReq.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.CreateTeamReq} returns this
 */
proto.CreateTeamReq.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DismissTeamReq.prototype.toObject = function(opt_includeInstance) {
  return proto.DismissTeamReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DismissTeamReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DismissTeamReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DismissTeamReq}
 */
proto.DismissTeamReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DismissTeamReq;
  return proto.DismissTeamReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DismissTeamReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DismissTeamReq}
 */
proto.DismissTeamReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DismissTeamReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DismissTeamReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DismissTeamReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DismissTeamReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 time = 1;
 * @return {number}
 */
proto.DismissTeamReq.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.DismissTeamReq} returns this
 */
proto.DismissTeamReq.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.QueryMemberListReq.prototype.toObject = function(opt_includeInstance) {
  return proto.QueryMemberListReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.QueryMemberListReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QueryMemberListReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.QueryMemberListReq}
 */
proto.QueryMemberListReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.QueryMemberListReq;
  return proto.QueryMemberListReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.QueryMemberListReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.QueryMemberListReq}
 */
proto.QueryMemberListReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.QueryMemberListReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.QueryMemberListReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.QueryMemberListReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QueryMemberListReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 time = 1;
 * @return {number}
 */
proto.QueryMemberListReq.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.QueryMemberListReq} returns this
 */
proto.QueryMemberListReq.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Message.oneofGroups_);
};
goog.inherits(proto.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Message.displayName = 'proto.Message';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Message.oneofGroups_ = [[11,12,13,14,15,21,22,51,52,53]];

/**
 * @enum {number}
 */
proto.Message.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  CONNECT: 11,
  CONN_ACK: 12,
  PING: 13,
  PONG: 14,
  DISCONNECT: 15,
  MSG_DATA: 21,
  MSG_DATA_ACK: 22,
  CREATE_TEAM_REQ: 51,
  DISMISS_TEAM_REQ: 52,
  QUERY_MEMBER_LIST_REQ: 53
};

/**
 * @return {proto.Message.PayloadCase}
 */
proto.Message.prototype.getPayloadCase = function() {
  return /** @type {proto.Message.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.Message.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    magic: jspb.Message.getFieldWithDefault(msg, 1, 0),
    version: jspb.Message.getFieldWithDefault(msg, 2, 0),
    packettype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    seq: jspb.Message.getFieldWithDefault(msg, 4, 0),
    payloadlength: jspb.Message.getFieldWithDefault(msg, 5, 0),
    connect: (f = msg.getConnect()) && proto.Connect.toObject(includeInstance, f),
    connAck: (f = msg.getConnAck()) && proto.ConnAck.toObject(includeInstance, f),
    ping: (f = msg.getPing()) && proto.Ping.toObject(includeInstance, f),
    pong: (f = msg.getPong()) && proto.Pong.toObject(includeInstance, f),
    disconnect: (f = msg.getDisconnect()) && proto.Disconnect.toObject(includeInstance, f),
    msgData: (f = msg.getMsgData()) && proto.MsgData.toObject(includeInstance, f),
    msgDataAck: (f = msg.getMsgDataAck()) && proto.MsgDataAck.toObject(includeInstance, f),
    createTeamReq: (f = msg.getCreateTeamReq()) && proto.CreateTeamReq.toObject(includeInstance, f),
    dismissTeamReq: (f = msg.getDismissTeamReq()) && proto.DismissTeamReq.toObject(includeInstance, f),
    queryMemberListReq: (f = msg.getQueryMemberListReq()) && proto.QueryMemberListReq.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message}
 */
proto.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message;
  return proto.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message}
 */
proto.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMagic(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {!proto.PacketType} */ (reader.readEnum());
      msg.setPackettype(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeq(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPayloadlength(value);
      break;
    case 11:
      var value = new proto.Connect;
      reader.readMessage(value,proto.Connect.deserializeBinaryFromReader);
      msg.setConnect(value);
      break;
    case 12:
      var value = new proto.ConnAck;
      reader.readMessage(value,proto.ConnAck.deserializeBinaryFromReader);
      msg.setConnAck(value);
      break;
    case 13:
      var value = new proto.Ping;
      reader.readMessage(value,proto.Ping.deserializeBinaryFromReader);
      msg.setPing(value);
      break;
    case 14:
      var value = new proto.Pong;
      reader.readMessage(value,proto.Pong.deserializeBinaryFromReader);
      msg.setPong(value);
      break;
    case 15:
      var value = new proto.Disconnect;
      reader.readMessage(value,proto.Disconnect.deserializeBinaryFromReader);
      msg.setDisconnect(value);
      break;
    case 21:
      var value = new proto.MsgData;
      reader.readMessage(value,proto.MsgData.deserializeBinaryFromReader);
      msg.setMsgData(value);
      break;
    case 22:
      var value = new proto.MsgDataAck;
      reader.readMessage(value,proto.MsgDataAck.deserializeBinaryFromReader);
      msg.setMsgDataAck(value);
      break;
    case 51:
      var value = new proto.CreateTeamReq;
      reader.readMessage(value,proto.CreateTeamReq.deserializeBinaryFromReader);
      msg.setCreateTeamReq(value);
      break;
    case 52:
      var value = new proto.DismissTeamReq;
      reader.readMessage(value,proto.DismissTeamReq.deserializeBinaryFromReader);
      msg.setDismissTeamReq(value);
      break;
    case 53:
      var value = new proto.QueryMemberListReq;
      reader.readMessage(value,proto.QueryMemberListReq.deserializeBinaryFromReader);
      msg.setQueryMemberListReq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMagic();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPackettype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSeq();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getPayloadlength();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getConnect();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.Connect.serializeBinaryToWriter
    );
  }
  f = message.getConnAck();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.ConnAck.serializeBinaryToWriter
    );
  }
  f = message.getPing();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.Ping.serializeBinaryToWriter
    );
  }
  f = message.getPong();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.Pong.serializeBinaryToWriter
    );
  }
  f = message.getDisconnect();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.Disconnect.serializeBinaryToWriter
    );
  }
  f = message.getMsgData();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.MsgData.serializeBinaryToWriter
    );
  }
  f = message.getMsgDataAck();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.MsgDataAck.serializeBinaryToWriter
    );
  }
  f = message.getCreateTeamReq();
  if (f != null) {
    writer.writeMessage(
      51,
      f,
      proto.CreateTeamReq.serializeBinaryToWriter
    );
  }
  f = message.getDismissTeamReq();
  if (f != null) {
    writer.writeMessage(
      52,
      f,
      proto.DismissTeamReq.serializeBinaryToWriter
    );
  }
  f = message.getQueryMemberListReq();
  if (f != null) {
    writer.writeMessage(
      53,
      f,
      proto.QueryMemberListReq.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 magic = 1;
 * @return {number}
 */
proto.Message.prototype.getMagic = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.setMagic = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 version = 2;
 * @return {number}
 */
proto.Message.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional PacketType packetType = 3;
 * @return {!proto.PacketType}
 */
proto.Message.prototype.getPackettype = function() {
  return /** @type {!proto.PacketType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.PacketType} value
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.setPackettype = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint64 seq = 4;
 * @return {number}
 */
proto.Message.prototype.getSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.setSeq = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 payloadLength = 5;
 * @return {number}
 */
proto.Message.prototype.getPayloadlength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.setPayloadlength = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Connect connect = 11;
 * @return {?proto.Connect}
 */
proto.Message.prototype.getConnect = function() {
  return /** @type{?proto.Connect} */ (
    jspb.Message.getWrapperField(this, proto.Connect, 11));
};


/**
 * @param {?proto.Connect|undefined} value
 * @return {!proto.Message} returns this
*/
proto.Message.prototype.setConnect = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearConnect = function() {
  return this.setConnect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.prototype.hasConnect = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional ConnAck conn_ack = 12;
 * @return {?proto.ConnAck}
 */
proto.Message.prototype.getConnAck = function() {
  return /** @type{?proto.ConnAck} */ (
    jspb.Message.getWrapperField(this, proto.ConnAck, 12));
};


/**
 * @param {?proto.ConnAck|undefined} value
 * @return {!proto.Message} returns this
*/
proto.Message.prototype.setConnAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearConnAck = function() {
  return this.setConnAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.prototype.hasConnAck = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Ping ping = 13;
 * @return {?proto.Ping}
 */
proto.Message.prototype.getPing = function() {
  return /** @type{?proto.Ping} */ (
    jspb.Message.getWrapperField(this, proto.Ping, 13));
};


/**
 * @param {?proto.Ping|undefined} value
 * @return {!proto.Message} returns this
*/
proto.Message.prototype.setPing = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearPing = function() {
  return this.setPing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.prototype.hasPing = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional Pong pong = 14;
 * @return {?proto.Pong}
 */
proto.Message.prototype.getPong = function() {
  return /** @type{?proto.Pong} */ (
    jspb.Message.getWrapperField(this, proto.Pong, 14));
};


/**
 * @param {?proto.Pong|undefined} value
 * @return {!proto.Message} returns this
*/
proto.Message.prototype.setPong = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearPong = function() {
  return this.setPong(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.prototype.hasPong = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional Disconnect disconnect = 15;
 * @return {?proto.Disconnect}
 */
proto.Message.prototype.getDisconnect = function() {
  return /** @type{?proto.Disconnect} */ (
    jspb.Message.getWrapperField(this, proto.Disconnect, 15));
};


/**
 * @param {?proto.Disconnect|undefined} value
 * @return {!proto.Message} returns this
*/
proto.Message.prototype.setDisconnect = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearDisconnect = function() {
  return this.setDisconnect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.prototype.hasDisconnect = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional MsgData msg_data = 21;
 * @return {?proto.MsgData}
 */
proto.Message.prototype.getMsgData = function() {
  return /** @type{?proto.MsgData} */ (
    jspb.Message.getWrapperField(this, proto.MsgData, 21));
};


/**
 * @param {?proto.MsgData|undefined} value
 * @return {!proto.Message} returns this
*/
proto.Message.prototype.setMsgData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 21, proto.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearMsgData = function() {
  return this.setMsgData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.prototype.hasMsgData = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional MsgDataAck msg_data_ack = 22;
 * @return {?proto.MsgDataAck}
 */
proto.Message.prototype.getMsgDataAck = function() {
  return /** @type{?proto.MsgDataAck} */ (
    jspb.Message.getWrapperField(this, proto.MsgDataAck, 22));
};


/**
 * @param {?proto.MsgDataAck|undefined} value
 * @return {!proto.Message} returns this
*/
proto.Message.prototype.setMsgDataAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 22, proto.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearMsgDataAck = function() {
  return this.setMsgDataAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.prototype.hasMsgDataAck = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional CreateTeamReq create_team_req = 51;
 * @return {?proto.CreateTeamReq}
 */
proto.Message.prototype.getCreateTeamReq = function() {
  return /** @type{?proto.CreateTeamReq} */ (
    jspb.Message.getWrapperField(this, proto.CreateTeamReq, 51));
};


/**
 * @param {?proto.CreateTeamReq|undefined} value
 * @return {!proto.Message} returns this
*/
proto.Message.prototype.setCreateTeamReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 51, proto.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearCreateTeamReq = function() {
  return this.setCreateTeamReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.prototype.hasCreateTeamReq = function() {
  return jspb.Message.getField(this, 51) != null;
};


/**
 * optional DismissTeamReq dismiss_team_req = 52;
 * @return {?proto.DismissTeamReq}
 */
proto.Message.prototype.getDismissTeamReq = function() {
  return /** @type{?proto.DismissTeamReq} */ (
    jspb.Message.getWrapperField(this, proto.DismissTeamReq, 52));
};


/**
 * @param {?proto.DismissTeamReq|undefined} value
 * @return {!proto.Message} returns this
*/
proto.Message.prototype.setDismissTeamReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 52, proto.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearDismissTeamReq = function() {
  return this.setDismissTeamReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.prototype.hasDismissTeamReq = function() {
  return jspb.Message.getField(this, 52) != null;
};


/**
 * optional QueryMemberListReq query_member_list_req = 53;
 * @return {?proto.QueryMemberListReq}
 */
proto.Message.prototype.getQueryMemberListReq = function() {
  return /** @type{?proto.QueryMemberListReq} */ (
    jspb.Message.getWrapperField(this, proto.QueryMemberListReq, 53));
};


/**
 * @param {?proto.QueryMemberListReq|undefined} value
 * @return {!proto.Message} returns this
*/
proto.Message.prototype.setQueryMemberListReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 53, proto.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearQueryMemberListReq = function() {
  return this.setQueryMemberListReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.prototype.hasQueryMemberListReq = function() {
  return jspb.Message.getField(this, 53) != null;
};


